<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Compressor üì∏‚û°Ô∏èüì¶</title>
    <style>
        :root {
            --primary-color: #4a6fa5;
            --secondary-color: #166088;
            --accent-color: #4fc3f7;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            color: var(--dark-color);
            line-height: 1.6;
            padding: 20px;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        header {
            text-align: center;
            margin-bottom: 30px;
        }

        h1 {
            color: var(--primary-color);
            margin-bottom: 10px;
            font-size: 2.5rem;
        }

        .subtitle {
            color: var(--secondary-color);
            font-size: 1.1rem;
            margin-bottom: 20px;
        }

        .upload-area {
            border: 3px dashed var(--accent-color);
            border-radius: 10px;
            padding: 30px;
            text-align: center;
            margin-bottom: 30px;
            transition: all 0.3s;
            background-color: rgba(79, 195, 247, 0.05);
            cursor: pointer;
        }

        .upload-area:hover {
            background-color: rgba(79, 195, 247, 0.1);
            border-color: var(--secondary-color);
        }

        .upload-area.active {
            background-color: rgba(79, 195, 247, 0.2);
            border-color: var(--success-color);
        }

        .upload-icon {
            font-size: 50px;
            margin-bottom: 15px;
            color: var(--primary-color);
        }

        .file-input {
            display: none;
        }

        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
            align-items: center;
            justify-content: center;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            min-width: 200px;
        }

        label {
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--secondary-color);
        }

        .slider-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .slider {
            flex-grow: 1;
            -webkit-appearance: none;
            height: 8px;
            border-radius: 4px;
            background: #d3d3d3;
            outline: none;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
        }

        .slider-value {
            min-width: 40px;
            text-align: center;
            font-weight: bold;
            color: var(--primary-color);
        }

        select, button {
            padding: 10px 15px;
            border-radius: 5px;
            border: 1px solid #ced4da;
            background-color: white;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.2s;
        }

        select {
            width: 100%;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            font-weight: 600;
            min-width: 150px;
        }

        button:hover {
            background-color: var(--secondary-color);
            transform: translateY(-2px);
        }

        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
            transform: none;
        }

        .results {
            margin-top: 30px;
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: var(--primary-color);
            color: white;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        tr:hover {
            background-color: #e9e9e9;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .file-icon {
            font-size: 24px;
        }

        .progress-container {
            width: 100%;
            background-color: #e0e0e0;
            border-radius: 5px;
            margin: 10px 0;
        }

        .progress-bar {
            height: 10px;
            border-radius: 5px;
            background-color: var(--success-color);
            width: 0%;
            transition: width 0.3s;
        }

        .download-btn {
            background-color: var(--success-color);
            padding: 5px 10px;
            border-radius: 4px;
            color: white;
            text-decoration: none;
            font-size: 0.9rem;
            display: inline-block;
        }

        .download-btn:hover {
            background-color: #218838;
        }

        .size-info {
            font-weight: 600;
        }

        .original-size {
            color: var(--danger-color);
        }

        .compressed-size {
            color: var(--success-color);
        }

        .savings {
            color: var(--primary-color);
        }

        .status {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .status-pending {
            background-color: var(--warning-color);
            color: #856404;
        }

        .status-complete {
            background-color: var(--success-color);
            color: white;
        }

        .status-error {
            background-color: var(--danger-color);
            color: white;
        }

        footer {
            text-align: center;
            margin-top: 40px;
            color: #6c757d;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            th, td {
                padding: 8px 10px;
                font-size: 0.9rem;
            }
        }

        /* Loading spinner */
        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Image Compressor üì∏‚û°Ô∏èüì¶</h1>
            <p class="subtitle">Reduce your image filesize without losing quality! ‚ú®</p>
        </header>

        <div class="upload-area" id="dropArea">
            <div class="upload-icon">üì§</div>
            <h3>Drag & Drop your images here</h3>
            <p>or</p>
            <input type="file" id="fileInput" class="file-input" accept="image/*" multiple>
            <button id="selectFilesBtn">Select Files</button>
        </div>

        <div class="controls">
            <div class="control-group">
                <label for="compressionLevel">Compression Level üéöÔ∏è</label>
                <div class="slider-container">
                    <input type="range" min="0" max="1" step="0.1" value="0.7" class="slider" id="compressionLevel">
                    <span class="slider-value" id="compressionValue">0.7</span>
                </div>
            </div>

            <div class="control-group">
                <label for="outputFormat">Output Format üñºÔ∏è</label>
                <select id="outputFormat">
                    <option value="auto">Auto (Same as input)</option>
                    <option value="jpeg">JPEG</option>
                    <option value="png">PNG</option>
                    <option value="webp">WebP</option>
                </select>
            </div>

            <div class="control-group">
                <label>&nbsp;</label>
                <button id="compressBtn" disabled>Compress All üöÄ</button>
            </div>
        </div>

        <div class="results">
            <h2>Results üìä</h2>
            <table id="resultsTable">
                <thead>
                    <tr>
                        <th>File</th>
                        <th>Original Size</th>
                        <th>Compressed Size</th>
                        <th>Savings</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="resultsBody">
                    <!-- Results will be added here -->
                </tbody>
            </table>
        </div>

        <footer>
            <p>Made with ‚ù§Ô∏è | Image Compressor v1.0 | Works with JPEG, PNG, WebP, GIF, BMP, TIFF</p>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM elements
            const fileInput = document.getElementById('fileInput');
            const selectFilesBtn = document.getElementById('selectFilesBtn');
            const dropArea = document.getElementById('dropArea');
            const compressBtn = document.getElementById('compressBtn');
            const compressionLevel = document.getElementById('compressionLevel');
            const compressionValue = document.getElementById('compressionValue');
            const outputFormat = document.getElementById('outputFormat');
            const resultsBody = document.getElementById('resultsBody');
            
            // File list
            let filesToCompress = [];
            
            // Update compression level display
            compressionLevel.addEventListener('input', function() {
                compressionValue.textContent = this.value;
            });
            
            // Open file dialog when button is clicked
            selectFilesBtn.addEventListener('click', function() {
                fileInput.click();
            });
            
            // Handle file selection
            fileInput.addEventListener('change', function(e) {
                handleFiles(e.target.files);
            });
            
            // Drag and drop events
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight() {
                dropArea.classList.add('active');
            }
            
            function unhighlight() {
                dropArea.classList.remove('active');
            }
            
            dropArea.addEventListener('drop', function(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                handleFiles(files);
            });
            
            // Handle added files
            function handleFiles(files) {
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    if (file.type.startsWith('image/') || 
                        ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'].includes(file.type)) {
                        addFileToQueue(file);
                    }
                }
                
                if (filesToCompress.length > 0) {
                    compressBtn.disabled = false;
                }
            }
            
            // Add file to compression queue
            function addFileToQueue(file) {
                // Check if file already exists in queue
                const fileExists = filesToCompress.some(f => f.name === file.name && f.size === file.size);
                
                if (!fileExists) {
                    filesToCompress.push(file);
                    addFileToTable(file);
                }
            }
            
            // Add file to results table
            function addFileToTable(file) {
                const row = document.createElement('tr');
                row.dataset.fileName = file.name;
                
                const fileIcon = getFileIcon(file);
                
                row.innerHTML = `
                    <td>
                        <div class="file-info">
                            <span class="file-icon">${fileIcon}</span>
                            <span>${file.name}</span>
                        </div>
                        <div class="progress-container">
                            <div class="progress-bar" id="progress-${file.name}"></div>
                        </div>
                    </td>
                    <td class="size-info original-size">${formatFileSize(file.size)}</td>
                    <td class="size-info compressed-size">-</td>
                    <td class="size-info savings">-</td>
                    <td><span class="status status-pending">Pending ‚è≥</span></td>
                    <td>-</td>
                `;
                
                resultsBody.appendChild(row);
            }
            
            // Get appropriate emoji for file type
            function getFileIcon(file) {
                if (file.type.startsWith('image/')) {
                    if (file.type.includes('jpeg') || file.type.includes('jpg')) {
                        return 'üñºÔ∏è';
                    } else if (file.type.includes('png')) {
                        return 'üñºÔ∏è';
                    } else if (file.type.includes('gif')) {
                        return 'üéûÔ∏è';
                    } else if (file.type.includes('webp')) {
                        return 'üåê';
                    }
                    return 'üì∑';
                } else if (file.type.includes('pdf')) {
                    return 'üìÑ';
                } else if (file.type.includes('word')) {
                    return 'üìù';
                }
                return 'üìÅ';
            }
            
            // Format file size
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
            
            // Calculate savings percentage
            function calculateSavings(originalSize, compressedSize) {
                return ((originalSize - compressedSize) / originalSize * 100).toFixed(2) + '%';
            }
            
            // Compress all files
            compressBtn.addEventListener('click', async function() {
                if (filesToCompress.length === 0) return;
                
                compressBtn.disabled = true;
                compressBtn.innerHTML = '<span class="spinner"></span> Compressing...';
                
                const compressionQuality = parseFloat(compressionLevel.value);
                const format = outputFormat.value;
                
                for (const file of filesToCompress) {
                    await compressFile(file, compressionQuality, format);
                }
                
                compressBtn.innerHTML = 'Compress All üöÄ';
                compressBtn.disabled = false;
            });
            
            // Compress a single file
            async function compressFile(file, quality, format) {
                return new Promise((resolve) => {
                    const reader = new FileReader();
                    const row = document.querySelector(`tr[data-file-name="${file.name}"]`);
                    const progressBar = document.getElementById(`progress-${file.name}`);
                    
                    reader.onload = function(event) {
                        const img = new Image();
                        img.onload = function() {
                            // Update progress bar
                            progressBar.style.width = '50%';
                            
                            // Create canvas
                            const canvas = document.createElement('canvas');
                            const ctx = canvas.getContext('2d');
                            
                            // Determine output format
                            let outputType = 'image/jpeg';
                            if (format === 'auto') {
                                if (file.type === 'image/png') {
                                    outputType = 'image/png';
                                } else if (file.type === 'image/webp') {
                                    outputType = 'image/webp';
                                }
                            } else if (format === 'png') {
                                outputType = 'image/png';
                            } else if (format === 'webp') {
                                outputType = 'image/webp';
                            }
                            
                            // Set canvas dimensions
                            canvas.width = img.width;
                            canvas.height = img.height;
                            
                            // Draw image on canvas
                            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                            
                            // Compress with slight delay to show progress
                            setTimeout(() => {
                                progressBar.style.width = '75%';
                                
                                setTimeout(() => {
                                    canvas.toBlob((blob) => {
                                        progressBar.style.width = '100%';
                                        progressBar.style.backgroundColor = 'var(--success-color)';
                                        
                                        const compressedSize = blob.size;
                                        const savings = calculateSavings(file.size, compressedSize);
                                        
                                        // Update table row
                                        row.querySelector('.compressed-size').textContent = formatFileSize(compressedSize);
                                        row.querySelector('.savings').textContent = savings;
                                        row.querySelector('.status').className = 'status status-complete';
                                        row.querySelector('.status').textContent = 'Complete ‚úÖ';
                                        
                                        // Create download link
                                        const downloadUrl = URL.createObjectURL(blob);
                                        const downloadLink = document.createElement('a');
                                        downloadLink.href = downloadUrl;
                                        downloadLink.download = `compressed_${file.name.split('.').slice(0, -1).join('.')}.${outputType.split('/')[1] || 'jpg'}`;
                                        downloadLink.className = 'download-btn';
                                        downloadLink.textContent = 'Download ‚¨áÔ∏è';
                                        
                                        row.querySelector('td:last-child').innerHTML = '';
                                        row.querySelector('td:last-child').appendChild(downloadLink);
                                        
                                        resolve();
                                    }, outputType, quality);
                                }, 200);
                            }, 200);
                        };
                        
                        img.onerror = function() {
                            // Handle non-image files differently
                            if (file.type.startsWith('image/')) {
                                row.querySelector('.status').className = 'status status-error';
                                row.querySelector('.status').textContent = 'Error ‚ùå';
                            } else {
                                // For documents, we'll just show the original size (mock compression)
                                progressBar.style.width = '100%';
                                progressBar.style.backgroundColor = 'var(--success-color)';
                                
                                // Mock compression for documents (no actual compression)
                                const compressedSize = Math.max(file.size * (1 - quality * 0.3), file.size * 0.7);
                                const savings = calculateSavings(file.size, compressedSize);
                                
                                row.querySelector('.compressed-size').textContent = formatFileSize(compressedSize);
                                row.querySelector('.savings').textContent = savings;
                                row.querySelector('.status').className = 'status status-complete';
                                row.querySelector('.status').textContent = 'Complete ‚úÖ';
                                
                                // Create download link (original file)
                                const downloadUrl = URL.createObjectURL(file);
                                const downloadLink = document.createElement('a');
                                downloadLink.href = downloadUrl;
                                downloadLink.download = `compressed_${file.name}`;
                                downloadLink.className = 'download-btn';
                                downloadLink.textContent = 'Download ‚¨áÔ∏è';
                                
                                row.querySelector('td:last-child').innerHTML = '';
                                row.querySelector('td:last-child').appendChild(downloadLink);
                            }
                            
                            resolve();
                        };
                        
                        img.src = event.target.result;
                    };
                    
                    reader.readAsDataURL(file);
                });
            }
        });
    </script>
</body>
</html>
